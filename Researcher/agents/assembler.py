import os
from datetime import datetime
from markdown_pdf import MarkdownPdf, Section

from agents import ResearchState
from utils import get_logger


class AssemblerAgent:
    def __init__(self, **convertor_kwargs):
        self.logger = get_logger(self.__class__.__name__)
        self.pdf = MarkdownPdf(**convertor_kwargs)
        self.css = 'body {text-align: justify}'

        self.logger.info('AssemblerAgent Initialised.')


    def set_meta_data(self, state: ResearchState) -> None:
        self.pdf.meta['creationDate'] = datetime.now().strftime('%Y-%m-%d')
        self.pdf.meta['producer'] = 'AI Research Assistant'
        self.pdf.meta['title'] = f'A Research Report on {state.get('topic', 'Untitled')}'
        self.pdf.meta['author'] = 'Harshit Kumawat'
        self.logger.info('Successfully generated meta data for the pdf.')


    def add_title_page(self) -> None:
        self.pdf.add_section(Section(
            f'# {self.pdf.meta['title']}'
            '\n\n'
            f'**Author:** {self.pdf.meta['author']} (Created using Agentic AI Pipeline)<br>'
            '**Disclamer:** This report is auto-generated by an AI-powered research assistant. Human verification is recommended for critical use.<br>'
            f'**Date of Creation:** {self.pdf.meta['creationDate']}<br>'
            '<hr>'
        ))
        self.logger.info('Created the title page.')

    
    def add_abstract(self, abstract: str) -> None:
        self.pdf.add_section(
            Section(text= f'## Abstract\n\n{abstract}', toc= False),
            self.css
        )
        self.logger.info('Added Abstract.')


    def add_methodology(self) -> None:
        path = os.path.join('utils', 'methodology.txt')
        with open(path) as f:
            methodology = f.read()

        self.pdf.add_section(
            Section(methodology),
            self.css
        )
        self.logger.info('Added Methodology.')


    def add_main_body(self, report_parts: list[str]) -> None:
        main_body = '\n\n'.join(report_parts)
        self.pdf.add_section(
            Section(main_body),
            self.css
        )
        self.logger.info('Added main body.')


    def save(self, file_name: str) -> None:
        os.makedirs('results', exist_ok= True)
        path = os.path.join('results', file_name)
        self.pdf.save(path)


    def create_final_pdf(self, state: ResearchState) -> None:
        self.set_meta_data(state)
        self.add_title_page()
        self.add_abstract(state.get('knowledge')['abstract'])
        self.add_methodology()
        self.add_main_body(state.get('report_parts', []))

        self.save(f"{state.get('topic', 'Untitled')}.pdf")
